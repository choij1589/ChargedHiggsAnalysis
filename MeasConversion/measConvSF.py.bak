import os
import argparse
import ROOT 
import pandas as pd
from math import pow, sqrt
from ctypes import c_double
from pprint import pprint

parser = argparse.ArgumentParser()
parser.add_argument("--era", required=True, type=str, help="era")
parser.add_argument("--channel", required=True, type=str, help="channel")
args = parser.parse_args()

ERA = args.era
CHANNEL = args.channel
histkey = "ZCand/mass"
WORKDIR = os.environ["WORKDIR"]

DATASTREAM = ""
REGION = ""
if CHANNEL == "Skim1E2Mu": 
    DATASTREAM = "MuonEG"
    REGION = "ZGamma1E2Mu"
if CHANNEL == "Skim3Mu": 
    DATASTREAM = "DoubleMuon"
    REGION = "ZGamma3Mu"
assert DATASTREAM in ["MuonEG", "DoubleMuon"]
assert REGION in ["ZGamma1E2Mu", "ZGamma3Mu"]

CONV = ["DYJets_MG", "DYJets10to50_MG", "ZGToLLG"]
DIBOSON = ["WZTo3LNu_amcatnlo","ZZTo4L_powheg"]
TTX     = ["ttWToLNu", "ttZToLLNuNu", "ttHToNonbb"]
OTHERS = ["WWW", "WWZ", "WZZ", "ZZZ", "tZq", "TTG", "tHq", "TTTT", "WWG", "VBF_HToZZTo4L", "GluGluHToZZTo4L"]
MCList = CONV + DIBOSON + TTX + OTHERS

SYSTs = []
if CHANNEL == "Skim1E2Mu":
    SYSTs = [["NonpromptUp", "NonpromptDown"],
             ["L1PrefireUp", "L1PrefireDown"],
             ["PileupReweightUp", "PileupReweightDown"],
             ["MuonIDSFUp", "MuonIDSFDown"],
             ["ElectronIDSFUp", "ElectronIDSFDown"],
             ["EMuTrigSFUp", "EMuTrigSFDown"],
             ["JetResUp", "JetResDown"],
             ["JetEnUp", "JetEnDown"],
             ["ElectronResUp", "ElectronResDown"],
             ["ElectronEnUp", "ElectronEnDown"],
             ["MuonEnUp", "MuonEnDown"],
             ["HeavyTagUpCorr", "HeavyTagDownCorr"],
             ["HeavyTagUpUnCorr", "HeavyTagDownUnCorr"],
             ["LightTagUpCorr", "LightTagDownCorr"],
             ["LightTagUpUnCorr", "LightTagDownUnCorr"]]
if CHANNEL == "Skim3Mu":
    SYSTs = [["NonpromptUp", "NonpromptDown"],
             ["L1PrefireUp", "L1PrefireDown"],
             ["PileupReweightUp", "PileupReweightDown"],
             ["MuonIDSFUp", "MuonIDSFDown"],
             ["DblMuTrigSFUp", "DblMuTrigSFDown"],
             ["JetResUp", "JetResDown"],
             ["JetEnUp", "JetEnDown"],
             ["ElectronResUp", "ElectronResDown"],
             ["ElectronEnUp", "ElectronEnDown"],
             ["MuonEnUp", "MuonEnDown"],
             ["HeavyTagUpCorr", "HeavyTagDownCorr"],
             ["HeavyTagUpUnCorr", "HeavyTagDownUnCorr"],
             ["LightTagUpCorr", "LightTagDownCorr"],
             ["LightTagUpUnCorr", "LightTagDownUnCorr"]]
    
# make a table
data = {}

# make index
indexCol = ["sample", "Central", "Stat"]
for syst in SYSTs:
    indexCol.append(syst[0])
    indexCol.append(syst[1])
indexCol.append("Total")

for index in indexCol:
    data[index] = []
    
def estTotalErr(sample, sampleDict):
    # find the index of the sample
    idx = sampleDict["sample"].index(sample)
    central = sampleDict["Central"][idx]
    totalErr = pow(sampleDict["Stat"][idx], 2)
    for syst in SYSTs:
        # initialized as False
        if not sampleDict[syst[0]][idx]: continue
        systUp = abs(sampleDict[syst[0]][idx] - central)
        systDown = abs(sampleDict[syst[1]][idx] - central)
        totalErr += pow(max(systUp, systDown), 2)
    
    return sqrt(totalErr)

# data
data["sample"].append("data")

f = ROOT.TFile.Open(f"{WORKDIR}/data/MeasConversion/{ERA}/{CHANNEL}__/DATA/MeasConversion_SkimTree_SS2lOR3l_{DATASTREAM}.root")
h = f.Get(f"{REGION}/Central/{histkey}"); h.SetDirectory(0)

stat = c_double()
rate = h.IntegralAndError(0, h.GetNbinsX()+1, stat)
data["Central"].append(rate)
data["Stat"].append(stat.value)

for index in indexCol[3:-1]:
    data[index].append(False)
data["Total"].append(estTotalErr("data", data))

f.Close()

# nonprompt
data["sample"].append("nonprompt")

f = ROOT.TFile.Open(f"{WORKDIR}/data/MeasConvMatrix/{ERA}/{CHANNEL}__/DATA/MeasConvMatrix_SkimTree_SS2lOR3l_{DATASTREAM}.root")
#f_conv = ROOT.TFile.Open(f"{WORKDIR}/data/MeasConvMatrix/{ERA}/{CHANNEL}__/MeasConvMatrix_SkimTree_SS2lOR3l_DYJets_MG.root")
h = f.Get(f"{REGION}/Central/{histkey}"); h.SetDirectory(0)
#h_conv = f_conv.Get(f"{REGION}/Central/{histkey}"); h_conv.SetDirectory(0)
f.Close()
#f_conv.Close()
#print(h.Integral(), h_conv.Integral(), h_conv.Integral()/h.Integral())
#h.Add(h_conv, -1)

stat = c_double()
rate = max(h.IntegralAndError(0, h.GetNbinsX(), stat), 0.)
data["Central"].append(rate)
data["Stat"].append(stat.value)

# systematics
data["NonpromptUp"].append(rate*1.3)
data["NonpromptDown"].append(rate*0.7)

for index in indexCol[5:-1]:
    data[index].append(False)
data["Total"].append(estTotalErr("nonprompt", data))

for mc in MCList:
    fkey = f"{WORKDIR}/data/MeasConversion/{ERA}/{CHANNEL}__/MeasConversion_SkimTree_SS2lOR3l_{mc}.root"
    assert os.path.exists(fkey)
    f = ROOT.TFile.Open(fkey)
    try:
        h = f.Get(f"{REGION}/Central/{histkey}"); h.SetDirectory(0)
    except:
        print(mc); continue
    
    data["sample"].append(mc)
    # fill each row
    stat = c_double()
    rate = h.IntegralAndError(0, h.GetNbinsX()+1, stat)
    data["Central"].append(rate)
    data["Stat"].append(stat.value)
    data['NonpromptUp'].append(False)
    data["NonpromptDown"].append(False)
    
    for index in indexCol[5:-1]:
        try:
            h_syst = f.Get(f"{REGION}/{index}/{histkey}")
            h_syst.SetDirectory(0)
            data[index].append(h_syst.Integral())
        except:
            data[index].append(0.)
    f.Close()
    
    data["Total"].append(estTotalErr(mc, data))

# make dataframe
df = pd.DataFrame(data)
df.set_index("sample", inplace=True)
df = df.transpose()
#pprint(df)
save_path = f"results/{ERA}/{CHANNEL}/rate.csv"
os.makedirs(os.path.dirname(save_path), exist_ok=True)
df.to_csv(save_path)

# measure scale factor
data_convsf = {}

# central value
rate_data = df.loc["Central", "data"]
rate_conv = df.loc["Central", "DYJets_MG"]
rate_pred = df.loc["Central", "nonprompt"]
for mc in MCList:
    if mc in CONV: continue
    if not mc in df.columns: continue
    #print(mc, df.loc["Central", mc])
    rate_pred += df.loc["Central", mc]
convsf = (rate_data - rate_pred) / rate_conv
data_convsf["Central"] = convsf

# stat
dNconv = df.loc["Stat", "DYJets_MG"]
dNpred = df.loc["Stat", "nonprompt"]
for mc in MCList:
    if mc in CONV: continue
    if not mc in df.columns: continue
    dNpred += df.loc["Stat", mc]
data_convsf["Stat"] = -(dNpred / rate_conv) + (rate_pred / pow(rate_conv, 2))*dNconv

# systatmatics
for syst in indexCol[3:-1]:
    dNconv = 0.
    if df.loc[syst, "DYJets_MG"]:
        dNconv += df.loc[syst, "DYJets_MG"] - df.loc["Central", "DYJets_MG"]
        
    dNpred = 0.
    if df.loc[syst, 'nonprompt']: dNpred += df.loc[syst, 'nonprompt'] - df.loc['Central', 'nonprompt']
    for mc in MCList:
        if mc in CONV: continue
        if not mc in df.columns: continue
        if df.loc[syst, mc]: dNpred += df.loc[syst, mc] - df.loc['Central', mc]
    data_convsf[syst] = -(dNpred / rate_conv) + (rate_pred / pow(rate_conv, 2))*dNconv

totalErr = pow(data_convsf['Stat'], 2)
for syst in SYSTs:
    thisErr = max( abs(data_convsf[syst[0]]), abs(data_convsf[syst[1]]) )
    totalErr += pow(thisErr, 2)
data_convsf["Total"] = sqrt(totalErr)
pprint(data_convsf)

#results = pd.DataFrame(data_convsf)
#results.to_csv(save_path.replace("rate", "results"))
